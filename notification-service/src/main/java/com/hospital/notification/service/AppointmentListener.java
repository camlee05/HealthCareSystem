package com.hospital.notification.service;

import com.hospital.notification.event.AppointmentEvent;
import com.hospital.notification.model.Notification;
import com.hospital.notification.repository.NotificationRepository;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;
import java.time.LocalDateTime;
import java.util.UUID;

@Service
public class AppointmentListener {

    private final NotificationRepository repo;

    public AppointmentListener(NotificationRepository repo) {
        this.repo = repo;
    }

    @RabbitListener(queues = "appointment.notifications")
    public void receive(AppointmentEvent event) {
        System.out.println("üíå Nh·∫≠n event t·ª´ RabbitMQ:");
        System.out.println("üì¶ Appointment ID: " + event.getAppointmentId());
        System.out.println("üßç Patient ID: " + event.getUserId());
        System.out.println("üë®‚Äç‚öïÔ∏è Doctor ID: " + event.getDoctorId());
        System.out.println("üïí Time: " + event.getTime());

        String timeStr = (event.getTime() != null) ? event.getTime().toString() : "ch∆∞a x√°c ƒë·ªãnh";

        // üßç B·ªÜNH NH√ÇN ‚Äî ƒê·∫∑t l·ªãch th√†nh c√¥ng
        String patientMsg = "‚úÖ ƒê·∫∑t l·ªãch th√†nh c√¥ng v√†o " + timeStr;
        if (!repo.existsByMessageAndUserId(patientMsg, event.getUserId())) {
            Notification notiForPatient = new Notification();
            notiForPatient.setUserId(event.getUserId());
            notiForPatient.setMessage(patientMsg);
            notiForPatient.setRead(false);
            notiForPatient.setCreatedAt(LocalDateTime.now());
            repo.save(notiForPatient);
        }

        // üßë‚Äç‚öïÔ∏è B√ÅC Sƒ® ‚Äî C√≥ l·ªãch h·∫πn m·ªõi v·ªõi b·ªánh nh√¢n
        if (event.getDoctorId() != null) {
            String doctorMsg = "üì• C√≥ l·ªãch h·∫πn m·ªõi v·ªõi b·ªánh nh√¢n ID: "
                    + event.getUserId() + " v√†o " + timeStr;

            if (!repo.existsByMessageAndUserId(doctorMsg, event.getDoctorId())) {
                Notification notiForDoctor = new Notification();
                notiForDoctor.setUserId(event.getDoctorId());
                notiForDoctor.setMessage(doctorMsg);
                notiForDoctor.setRead(false);
                notiForDoctor.setCreatedAt(LocalDateTime.now());
                repo.save(notiForDoctor);
            }
        } else {
            System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ doctorId ‚Äî b·ªè qua th√¥ng b√°o cho b√°c sƒ©.");
        }

        // üßë‚Äçüíº ADMIN ‚Äî Nh·∫≠n th√¥ng b√°o t·ªïng (qua user-service)
        try {
            RestTemplate rest = new RestTemplate();
            String adminUrl = "http://user-service:8081/api/users/role/ADMIN"; // üîß g·ªçi th·∫≥ng sang service qua Docker network
            ResponseEntity<List> response = rest.getForEntity(adminUrl, List.class);
            List<Map<String, Object>> admins = response.getBody();

            if (admins != null && !admins.isEmpty()) {
                for (Map<String, Object> admin : admins) {
                    String adminIdStr = (String) admin.get("id");
                    UUID adminId = UUID.fromString(adminIdStr);
                    String adminMsg = "‚öôÔ∏è C√≥ l·ªãch h·∫πn m·ªõi t·ª´ b·ªánh nh√¢n ID: "
                            + event.getUserId() + " v√†o " + timeStr;

                    if (!repo.existsByMessageAndUserId(adminMsg, adminId)) {
                        Notification notiForAdmin = new Notification();
                        notiForAdmin.setUserId(adminId);
                        notiForAdmin.setMessage(adminMsg);
                        notiForAdmin.setRead(false);
                        notiForAdmin.setCreatedAt(LocalDateTime.now());
                        repo.save(notiForAdmin);
                    }
                }
            } else {
                System.err.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y admin n√†o trong user-service");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c admin t·ª´ user-service: " + e.getMessage());
        }

        System.out.println("üíæ ƒê√£ l∆∞u th√¥ng b√°o cho Patient + Doctor + Admin");
    }
}
